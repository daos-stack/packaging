From: Benjamin Drung <bdrung@debian.org>
Date: Thu, 28 Dec 2017 16:26:37 +0000
Subject: Wrap long lines in man pages

Some man pages provoke warnings or errors from man.
.
"cannot adjust" or "can't break" indicate trouble with paragraph filling,
usually related to long lines. Adjustment can be helped by left
justifying, breaks can be helped with hyphenation, see "Manipulating
Filling and Adjusting" and "Manipulating Hyphenation" in the groff
manual (see info groff).
.
To test this for yourself you can use the following command:
 LC_ALL=en_US.UTF-8 MANROFFSEQ='' MANWIDTH=80 \
         man --warnings -E UTF-8 -l -Tutf8 -Z <file> >/dev/null
.
Refer to the groff_man(7) manual page and the groff_mdoc(7) manual
page for details.
---
 man/man3/fi_getinfo.3 |  5 ++++-
 man/man3/fi_trigger.3 | 15 +++++++++++----
 2 files changed, 15 insertions(+), 5 deletions(-)

diff --git a/man/man3/fi_getinfo.3 b/man/man3/fi_getinfo.3
index 180b501..09ca642 100644
--- a/man/man3/fi_getinfo.3
+++ b/man/man3/fi_getinfo.3
@@ -11,7 +11,8 @@ fi_allocinfo, fi_dupinfo \- Allocate / duplicate an fi_info structure
 #include\ <rdma/fabric.h>
 
 int\ fi_getinfo(int\ version,\ const\ char\ *node,\ const\ char\ *service,
-\ \ \ \ \ \ \ \ uint64_t\ flags,\ struct\ fi_info\ *hints,\ struct\ fi_info\ **info);
+\ \ \ \ \ \ \ \ uint64_t\ flags,\ struct\ fi_info\ *hints,
+\ \ \ \ \ \ \ \ struct\ fi_info\ **info);
 
 void\ fi_freeinfo(struct\ fi_info\ *info);
 
@@ -607,7 +608,9 @@ with their GNI protocol.
 The length and content of the string is address and/or provider
 specific, but in general follows a URI model:
 .PP
+.nf
 address_format[://[node][:[service][/[field3]...][?[key=value][&k2=v2]...]]]
+.fi
 .PP
 Examples: \- fi_sockaddr://10.31.6.12:7471 \-
 fi_sockaddr_in6://[fe80::6:12]:7471 \-
diff --git a/man/man3/fi_trigger.3 b/man/man3/fi_trigger.3
index 5f65d04..bd5697a 100644
--- a/man/man3/fi_trigger.3
+++ b/man/man3/fi_trigger.3
@@ -48,7 +48,7 @@ The format of struct fi_triggered_context[2] is described below.
 .nf
 \f[C]
 struct\ fi_triggered_context\ {
-\ \ \ \ enum\ fi_trigger_event\ \ \ \ \ \ \ \ \ \ \ \ \ \ \ event_type;\ \ \ /*\ trigger\ type\ */
+\ \ \ \ enum\ fi_trigger_event\ \ \ \ \ \ \ \ \ event_type;\ \ \ /*\ trigger\ type\ */
 \ \ \ \ union\ {
 \ \ \ \ \ \ \ \ struct\ fi_trigger_threshold\ threshold;
 \ \ \ \ \ \ \ \ void\ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ *internal[3];\ /*\ reserved\ */
@@ -56,7 +56,7 @@ struct\ fi_triggered_context\ {
 };
 
 struct\ fi_triggered_context2\ {
-\ \ \ \ enum\ fi_trigger_event\ \ \ \ \ \ \ \ \ \ \ \ \ \ \ event_type;\ \ \ /*\ trigger\ type\ */
+\ \ \ \ enum\ fi_trigger_event\ \ \ \ \ \ \ \ \ event_type;\ \ \ /*\ trigger\ type\ */
 \ \ \ \ union\ {
 \ \ \ \ \ \ \ \ struct\ fi_trigger_threshold\ threshold;
 \ \ \ \ \ \ \ \ void\ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ *internal[7];\ /*\ reserved\ */
@@ -76,8 +76,15 @@ The following trigger events are defined.
 operation will be deferred until an event counter crosses an application
 specified threshold value.
 The threshold is specified using struct fi_trigger_threshold:
-.PP
-\f[C]c\ \ \ struct\ fi_trigger_threshold\ {\ \ \ \ \ struct\ fid_cntr\ *cntr;\ /*\ event\ counter\ to\ check\ */\ \ \ \ \ size_t\ threshold;\ \ \ \ \ \ /*\ threshold\ value\ */\ \ \ };\f[]
+.IP
+.nf
+\f[C]
+struct\ fi_trigger_threshold\ {
+\ \ \ \ \ struct\ fid_cntr\ *cntr;\ \ \ \ \ /*\ event\ counter\ to\ check\ */
+\ \ \ \ \ size_t\ threshold;\ \ \ \ \ \ \ \ \ \ /*\ threshold\ value\ */
+};
+\f[]
+.fi
 .PP
 Threshold operations are triggered in the order of the threshold values.
 This is true even if the counter increments by a value greater than 1.
